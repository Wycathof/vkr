import telebot
from telebot import types
import sqlite3
from zipfile import ZipFile
from pathlib import *
from work_with_cvs import *
#rasa

bot = telebot.TeleBot('5944321076:AAErW98ZKZUm-D8zMpxqtCbMF6JF_DMQlHA')


# 356883896 - –∫–∞—Ç—è
# 6268363941 - —è
# 315540688 - vadim

def extract_arg(arg):
    return arg.split()[1:]


def check_status(id_user):
    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()
    cursor.execute(f"SELECT id FROM login_id WHERE id = {id_user}")
    result_in_db = cursor.fetchone()
    if result_in_db is None:
        return False
    else:
        return True


def first_start(message, user_id):
    kb = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é ü§°', url="https://t.me/qumin163")
    kb.add(btn1)
    bot.send_message(message.chat.id,
                     f"–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.\n–í–∞—à ID: <code>{user_id}</code>",
                     reply_markup=kb, parse_mode='html')


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    print(user_id, message.from_user.username)
    if check_status(user_id):
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton(text="–ü–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è")
        btn2 = types.KeyboardButton(text="–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –£–ó")
        kb.add(btn1, btn2)

        bot.send_message(message.chat.id, "–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø! –£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã üòé", reply_markup=kb)
        bot.send_message(message.chat.id,
                         "–ï—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.\n–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /help")

        check = True
    else:
        first_start(message, user_id)


@bot.message_handler(commands=['help'])
def help(message):
    user_id = message.from_user.id
    if check_status(user_id):
        bot.send_message(message.chat.id,
                         "–ü—Ä–∏–≤–µ—Ç! –î–∞–Ω–Ω—ã–π –±–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏ –ò–ë.\n\n–ß—Ç–æ–±—ã —è —Å–º–æ–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—ã–≥—Ä—É–∑–∫—É, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ—ë –≤ –º–µ–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>.csv</b>. "
                         "–ï—Å–ª–∏ –∂–µ –æ–Ω–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–∞—è (<b>>20MB</b>), —Ç–æ –∑–∞–ø–∞–∫—É–π –µ—ë –≤ <b>.zip</b> –∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–∏—Å—ã–ª—ã–π –º–Ω–µ.\n–Ø —Å–º–æ–≥—É –µ–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å ü§ñ"
                         "\n\n–°–æ–≤—Å–µ–º –∑–∞–±—ã–ª —Å–∫–∞–∑–∞—Ç—å...\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –≤ –≤—ã–≥—Ä—É–∑–∫–µ –±—ã–ª–∞ –∫–æ–ª–æ–∫–∞ <b><u>body</u></b>",
                         parse_mode='html')
        bot.send_message(message.chat.id,
                         "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—ã–±–µ—Ä–∏ –Ω–∏–∂–µ –∫–∞–∫–æ–π —Ç–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Ç—ã —Ö–æ—áe—à—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ‚¨á\n(–ï—Å–ª–∏ –∫–Ω–æ–ø–æ—á–µ–∫ –Ω–µ—Ç, "
                         "—Ç–æ –∂–º–∏ /start)")
    else:
        first_start(message, user_id)


@bot.message_handler(commands=['insert'])
def insert(message):
    user_id = message.from_user.id
    flag = "NULL"
    try:
        if user_id == 6268363941:
            status = extract_arg(message.text)

            connect = sqlite3.connect('users.db')
            cursor = connect.cursor()
            cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(
                id INTEGER,
                flag TEXT,
                fio TEXT,
                whoappend TEXT
            )""")
            connect.commit()
            users_list = [status[0], flag, status[1], message.from_user.username]
            cursor.execute(f"SELECT id FROM login_id WHERE id = {users_list[0]}")
            data_id = cursor.fetchone()
            # cursor.execute(f"SELECT flag FROM login_id WHERE id = {users_list[0]}")
            # data_flag = cursor.fetchone()
            if data_id is None:
                cursor.execute("INSERT INTO login_id VALUES(?, ?, ?, ?);", users_list)
                bot.send_message(message.chat.id, "–î–æ–±–∞–≤–∏–ª")
                connect.commit()
            else:
                bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º {data_id[0]} —É–∂–µ –µ—Å—Ç—å")
                # bot.send_message(message.chat.id, data_flag)

        else:
            bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∏ –Ω–µ –±—É–¥–µ—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∞—è "
                                              "–∫–æ–º–∞–Ω–¥–∞.")
    except IndexError:
        bot.reply_to(message, "–ó–∞–±—ã–ª —É–∫–∞–∑–∞—Ç—å id –∏–ª–∏ –§–ò–û")
    except Exception as e:
        bot.reply_to(message, e)


@bot.message_handler(commands=['delete'])
def insert(message):
    user_id = message.from_user.id
    try:
        if user_id == 6268363941:

            status = extract_arg(message.text)
            connect = sqlite3.connect('users.db')
            cursor = connect.cursor()

            cursor.execute(f"DELETE FROM login_id WHERE id = {status[0]}")
            bot.send_message(message.chat.id, "–£–¥–∞–ª–∏–ª")
            connect.commit()
        else:
            bot.send_message(message.chat.id,
                             "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∏ –Ω–µ –±—É–¥–µ—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    except IndexError:
        bot.reply_to(message, "–ó–∞–±—ã–ª —É–∫–∞–∑–∞—Ç—å id")
    except Exception as e:
        bot.reply_to(message, e)


@bot.message_handler(commands=['showall'])
def insert(message):
    user_id = message.from_user.id
    if user_id == 6268363941:
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()

        cursor.execute("SELECT id, fio FROM login_id;")
        all_results = cursor.fetchall()
        list = []
        for res in all_results:
            list.append(str(str(res[0]) + "   --->   " + str(res[1])))
        bot.send_message(message.chat.id, '\n'.join(list))
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∏ –Ω–µ –±—É–¥–µ—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞.")


@bot.message_handler(content_types=['text'])
def message_reply(message):
    user_id = message.from_user.id
    if check_status(user_id):
        if message.text == '–ü–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è':
            connect = sqlite3.connect('users.db')
            cursor = connect.cursor()

            cursor.execute(f"UPDATE login_id SET flag =? WHERE id =?", ("password", user_id))
            connect.commit()
            bot.send_message(message.chat.id,
                             "–û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å —è –æ—Ç –≤–∞—Å –∂–¥—É –≤—ã–≥—Ä—É–∑–∫—É –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—É\n<b>–ü–û–ü–´–¢–ö–ò –ü–û–î–ë–û–†–ê –ü–ê–†–û–õ–Ø</b>",
                             parse_mode='html')

        elif message.text == '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –£–ó':
            connect = sqlite3.connect('users.db')
            cursor = connect.cursor()

            cursor.execute(f"UPDATE login_id SET flag =? WHERE id =?", ("block", user_id))
            connect.commit()
            bot.send_message(message.chat.id,
                             "–û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å —è –æ—Ç –≤–∞—Å –∂–¥—É –≤—ã–≥—Ä—É–∑–∫—É –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—É\n<b>–ë–õ–û–ö–ò–†–û–í–ö–ò –£–ó</b>",
                             parse_mode='html')

    else:
        first_start(message, user_id)


@bot.message_handler(content_types=['document'])
def document(message):
    user_id = message.from_user.id
    if check_status(user_id):
        try:
            chat_id = message.chat.id

            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            name_file = message.document.file_name
            print('file name: ' + name_file)
            path = 'C:/Users/ArVip/Desktop/1/' + name_file
            with open(path, 'wb') as new_file:
                new_file.write(downloaded_file)
            name_file_test = ""
            bot.reply_to(message, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
            if name_file.find(".zip") != -1:                                                      #—Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—É—Ñ–∏–∫
                with ZipFile(f'C:/Users/ArVip/Desktop/1/' + name_file, 'r') as f:
                    f.extractall('C:/Users/ArVip/Desktop/1/')
                    for item in f.infolist():
                        name_file = item.filename
            # with ZipFile(f'C:/Users/ArVip/Desktop/1/' + name_file, 'r') as f:
            #     f.extractall('C:/Users/ArVip/Desktop/1/')
            #     for item in f.infolist():
            #         name_file = item.filename
            print('path: ' + path)
            print(f'name_file_test: {name_file}')


            print('executing main')
            connect = sqlite3.connect('users.db')
            cursor = connect.cursor()

            cursor.execute(f"SELECT flag FROM login_id WHERE id = {user_id}")
            data_flag = cursor.fetchone()
            print(data_flag[0])


            path = 'C:/Users/ArVip/Desktop/1/' + name_file
            print('path to main', path)

            start_time_bot = datetime.now()
            bot.send_message(message.chat.id, main(path, data_flag[0], name_file))
            bot.send_message(message.chat.id, f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {datetime.now() - start_time_bot}")


        except pd.errors.ParserError:
            bot.reply_to(message, "–ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏.\n–Ø –ø—Ä–∏–Ω–∏–º–∞—é .csv, .xlsx –∏–ª–∏ .zip")

        except Exception as e:
            if str(e) == "'body'":
                bot.reply_to(message, '–í—ã –∑–∞–±—ã–ª–∏ –≤—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–µ "body" ü´§')
            else:
                bot.reply_to(message, e)


    else:
        first_start(message, user_id)


print('BOT STARTED')
bot.polling(none_stop=True)
